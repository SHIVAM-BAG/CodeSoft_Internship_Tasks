# -*- coding: utf-8 -*-
"""CodeSoft_Churn_Modeling_Task3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GF4JJ9h2Wi6PzmQDB6Z3KrZ28kirFY23
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/Churn_Modelling.csv')
df.head()

df.shape

df.columns=df.columns.str.strip()

df.columns=df.columns.str.lower()

df.columns

df.isnull().sum()

df[df.duplicated(subset=['customerid'],keep=False)]

df.info()

df.describe()

plt.figure(figsize=(8,5))
sns.countplot(data=df,x='exited')
plt.show()

df['exited'].value_counts().to_frame()

from sklearn.utils import resample

churn_majority=df[df['exited']==0]
churn_minority=df[df['exited']==1]
churn_majority_downsample=resample(churn_majority,n_samples=2037,replace=False,random_state=42)
churn_df=pd.concat([churn_majority_downsample,churn_minority])

churn_df['exited'].value_counts().to_frame()

plt.figure(figsize=(8,5))
sns.countplot(data=churn_df,x='exited')
plt.show()

churn_df.head()

churn_df.columns

churn_df.drop(['rownumber', 'customerid', 'surname','geography','gender'],axis=1,inplace=True)

churn_df.corr()

plt.figure(figsize=(15,5))
sns.heatmap(churn_df.corr(),annot=True)
plt.show()

df_corr_exit=churn_df.corr()['exited'].to_frame()

plt.figure(figsize=(15,5))
sns.barplot(data=df_corr_exit,x=df_corr_exit.index,y='exited')
plt.show()

x=churn_df.drop(['exited'],axis=1)
y=churn_df['exited']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)
x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression(max_iter=500)
lr.fit(x_train,y_train)

print(lr.score(x_train,y_train))
print(lr.score(x_test,y_test))

y_pred=lr.predict(x_test)

from sklearn.metrics import confusion_matrix,recall_score,precision_score,accuracy_score,f1_score,ConfusionMatrixDisplay
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(f1_score(y_test,y_pred))

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_pred,labels=lr.classes_),display_labels=lr.classes_)
cmd.plot()

from sklearn.linear_model import LogisticRegressionCV
lr=LogisticRegressionCV(max_iter=500,solver='liblinear',penalty='l1',cv=3,Cs=10)
lr.fit(x_train,y_train)

print(lr.score(x_train,y_train))
print(lr.score(x_test,y_test))

y_pred=lr.predict(x_test)

print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(f1_score(y_test,y_pred))

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_pred,labels=lr.classes_),display_labels=lr.classes_)
cmd.plot()

lr=LogisticRegressionCV(max_iter=500,solver='liblinear',penalty='l2',cv=4,Cs=10)
lr.fit(x_train,y_train)

print(lr.score(x_train,y_train))
print(lr.score(x_test,y_test))

y_pred=lr.predict(x_test)

print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(f1_score(y_test,y_pred))

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_pred,labels=lr.classes_),display_labels=lr.classes_)
cmd.plot()

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=3,metric='euclidean')
knn.fit(x_train,y_train)

print(knn.score(x_train,y_train))
print(knn.score(x_test,y_test))

y_pred=knn.predict(x_test)

print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(f1_score(y_test,y_pred))

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_pred,labels=knn.classes_),display_labels=knn.classes_)
cmd.plot()

knn=KNeighborsClassifier(n_neighbors=3,metric='euclidean')
from sklearn.preprocessing import StandardScaler

ss=StandardScaler()
x_train_ss=ss.fit_transform(x_train)
x_test_ss=ss.fit_transform(x_test)
knn.fit(x_train_ss,y_train)

print(knn.score(x_train_ss,y_train))
print(knn.score(x_test_ss,y_test))

y_pred=knn.predict(x_test_ss)

print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(f1_score(y_test,y_pred))

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_pred,labels=knn.classes_),display_labels=knn.classes_)
cmd.plot()

from sklearn.svm import SVC
svc=SVC(kernel='rbf',gamma=2,C=1)
svc.fit(x_train,y_train)

print(svc.score(x_train,y_train))
print(svc.score(x_test,y_test))

y_pred=knn.predict(x_test_ss)

print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(f1_score(y_test,y_pred))

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_pred,labels=svc.classes_),display_labels=svc.classes_)
cmd.plot()